
=encoding utf8

=head1 NAME

Faker::Maker

=cut

=head1 ABSTRACT

Abstract Base Class for Faker

=cut

=head1 SYNOPSIS

  package Example;

  use Data::Object::Class;

  with 'Faker::Maker';

  package main;

  my $example = Example->new;

=cut

=head1 DESCRIPTION

This package provides provides methods for generating and selecting random
data.

=cut

=head1 LIBRARIES

This package uses type constraints from:

L<Types::Standard>

=cut

=head1 METHODS

This package implements the following methods:

=cut

=head2 format_lex_markers

  format_lex_markers(Str $string) : Str

The format_lex_markers method replaces each C<?> character in the string with a
random letter.

=over 4

=item format_lex_markers example #1

  # given: synopsis

  $example->format_lex_markers('???')

=back

=cut

=head2 format_line_markers

  format_line_markers(Str $string) : Str

The format_line_markers method replaces each escaped C<\n> (newline) character
in the string with a proper newline character.

=over 4

=item format_line_markers example #1

  # given: synopsis

  $example->format_line_markers('foo\nbar')

=back

=cut

=head2 format_number_markers

  format_number_markers(Str $string) : Str

The format_number_markers method replaces each C<#> in the string with a random
digit, and each C<%> with a random non-zero digit.

=over 4

=item format_number_markers example #1

  # given: synopsis

  $example->format_number_markers('#-%-#')

=back

=cut

=head2 parse_format

  parse_format(Str $string) : Str

The parse_format method replaces each C<{{plugin.name}}> in the string with the
result of the evaluation of the plugin specified in the token, e.g.
C<{{person.name}}> is replaced with the result of executing the
L<Faker::Plugin::PersonName> plugin.

=over 4

=item parse_format example #1

  # given: synopsis

  $example->parse_format('{{person.name}}')

=back

=cut

=head2 process

  process(Tuple[Str, Str] $lookup, Maybe[HashRef[Int]] $options) : Str

The process method performs a lookup and replacement in the lookup results
based on the options specified. Valid options are C<all_markers>,
C<lex_markers>, C<line_markers>, and C<number_markers>.

=over 4

=item process example #1

  # given: synopsis

  $example->process(['person', 'username'], {
    all_markers => 1
  })

=back

=cut

=head2 process_format

  process_format(Str $format) : Str

The process_format method dispatches to a plugin or performs a lookup and
returns the result.

=over 4

=item process_format example #1

  # given: synopsis

  $example->process_format('person.username')

=back

=cut

=head2 process_lookup

  process_lookup(Tuple[Str, Str] $lookup) : Str

The process_lookup method performs a lookup and returns the result.

=over 4

=item process_lookup example #1

  # given: synopsis

  $example->process(['person', 'username'])

=back

=cut

=head2 process_markers

  process_markers(Str $string) : Str

The process_markers method replaces all markers, e.g. C<?>, C<#>, C<%>, with
their random character counterparts.

=over 4

=item process_markers example #1

  # given: synopsis

  $example->process_markers('#.%.#.?%?')

=back

=cut

=head2 random_array_item

  random_array_item(ArrayRef $items) : Any

The random_array_item method returns a random element from the C<arrayref>
provided.

=over 4

=item random_array_item example #1

  # given: synopsis

  $example->random_item(['a', 'b', 'c'])

=back

=cut

=head2 random_between

  random_between(Maybe[Int] $from, Maybe[Int] $to) : Int

The random_between method returns a random number between the integers
provided, or between C<0> and C<2147483647>.

=over 4

=item random_between example #1

  # given: synopsis

  $example->random_between

=back

=cut

=head2 random_digit

  random_digit() : Int

The random_digit method returns a random digit betwee C<0> and C<10>.

=over 4

=item random_digit example #1

  # given: synopsis

  $example->random_digit

=back

=cut

=head2 random_digit_not_zero

  random_digit_not_zero() : Int

The random_digit_not_zero method returns a random digit betwee C<1> and C<10>.

=over 4

=item random_digit_not_zero example #1

  # given: synopsis

  $example->random_digit_not_zero

=back

=cut

=head2 random_float

  random_float(Maybe[Int] $place, Maybe[Int] $min, Maybe[Int] $max) : Num

The random_float method returns a random floating-point number between the
integers provided.

=over 4

=item random_float example #1

  # given: synopsis

  $example->random_float

=back

=over 4

=item random_float example #2

  # given: synopsis

  $example->random_float(1, 10, 200)

=back

=over 4

=item random_float example #3

  # given: synopsis

  $example->random_float(2, 10, 200)

=back

=cut

=head2 random_hash_item

  random_hash_item(HashRef $items) : Any

The random_hash_item method returns a random element from the C<hashref>
provided.

=over 4

=item random_hash_item example #1

  # given: synopsis

  $example->random_item({'a' => 1, 'b' => 2, 'c' => 3})

=back

=cut

=head2 random_item

  random_item(ArrayRef | HashRef $items) : Any

The random_item method returns a random element from the C<arrayref> or
C<hashref> provided.

=over 4

=item random_item example #1

  # given: synopsis

  $example->random_item(['a', 'b', 'c'])

=back

=over 4

=item random_item example #2

  # given: synopsis

  $example->random_item({'a' => 1, 'b' => 2, 'c' => 3})

=back

=cut

=head2 random_letter

  random_letter() : Str

The random_letter method returns a random alphabetic character.

=over 4

=item random_letter example #1

  # given: synopsis

  $example->random_letter

=back

=cut

=head2 random_number

  random_number() : Num

The random_number method returns a random number.

=over 4

=item random_number example #1

  # given: synopsis

  $example->random_number

=back

=cut

=head1 AUTHOR

Al Newkirk, C<awncorp@cpan.org>

=head1 LICENSE

Copyright (C) 2011-2019, Al Newkirk, et al.

This is free software; you can redistribute it and/or modify it under the terms
of the The Apache License, Version 2.0, as elucidated in the L<"license
file"|https://github.com/cpanery/faker/blob/master/LICENSE>.

=head1 ACKNOWLEDGEMENTS

Parts of this library were inspired by the following implementations:

L<PHP Faker|https://github.com/fzaninotto/Faker>

L<Ruby Faker|https://github.com/stympy/faker>

L<Python Faker|https://github.com/joke2k/faker>

L<JS Faker|https://github.com/Marak/faker.js>

=head1 PROJECT

L<Wiki|https://github.com/cpanery/faker/wiki>

L<Project|https://github.com/cpanery/faker>

L<Initiatives|https://github.com/cpanery/faker/projects>

L<Milestones|https://github.com/cpanery/faker/milestones>

L<Contributing|https://github.com/cpanery/faker/blob/master/CONTRIBUTE.md>

L<Issues|https://github.com/cpanery/faker/issues>

=cut
